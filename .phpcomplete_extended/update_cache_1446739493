{"classdata":{"file":"src\/Controller\/Api\/EvidencesController.php","fqcn":"App\\Controller\\Api\\EvidencesController","data":{"methods":{"modifier":{"public":{"0":"initialize","1":"add","2":"implementedEvents","3":"dispatchEvent","4":"eventManager","6":"beforeRender","10":"__construct","11":"components","12":"loadComponent","13":"__get","14":"__set","15":"setRequest","16":"invokeAction","17":"startupProcess","18":"shutdownProcess","19":"redirect","20":"setAction","21":"render","22":"referer","23":"paginate","24":"isAction","25":"beforeFilter","26":"beforeRedirect","27":"afterFilter","28":"tableLocator","29":"log","30":"loadModel","31":"modelFactory","32":"requestAction","33":"viewBuilder","34":"createView","35":"set","36":"viewOptions"},"private":[],"protected":["_mergeControllerVars","_loadComponents","_viewPath","_mergeVars","_mergeProperty","_mergePropertyData","_setModelClass"],"final":[],"static":[],"interface":[],"abstract":["implementedEvents","dispatchEvent","eventManager"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","initialize":{"params":[],"docComment":"","inheritdoc":0,"startLine":11,"endLine":13,"origin":"src\/Controller\/Api\/EvidencesController.php","signature":"()  : none"},"add":{"params":[],"docComment":"","inheritdoc":0,"startLine":15,"endLine":25,"origin":"src\/Controller\/Api\/EvidencesController.php","signature":"()  : none"},"implementedEvents":{"params":[],"docComment":"\n Returns a list of events this object is implementing. When the class is registered\n in an event manager, each individual method will be associated with the respective event.\n\n ### Example:\n\n ```\n  public function implementedEvents()\n  {\n      return [\n          'Order.complete' => 'sendEmail',\n          'Article.afterBuy' => 'decrementInventory',\n          'User.onRegister' => ['callable' => 'logRegistration', 'priority' => 20, 'passParams' => true]\n      ];\n  }\n ```\n\n @return array associative array or event key names pointing to the function\n that should be called in the object when the respective event is fired\n","inheritdoc":0,"startLine":45,"endLine":45,"origin":"vendor\/cakephp\/cakephp\/src\/Event\/EventListenerInterface.php","return":"","array_return":0,"signature":"()  : array"},"dispatchEvent":{"params":{"$name":"string","$data":"array|null","$subject":"object|null"},"docComment":"\n Wrapper for creating and dispatching events.\n\n Returns a dispatched event.\n\n @param string $name Name of the event.\n @param array|null $data Any value you wish to be transported with this event to\n it can be read by listeners.\n @param object|null $subject The object that this event applies to\n ($this by default).\n\n @return \\Cake\\Event\\Event\n","inheritdoc":0,"startLine":41,"endLine":41,"origin":"vendor\/cakephp\/cakephp\/src\/Event\/EventDispatcherInterface.php","return":"Cake\\Event\\Event","array_return":0,"signature":"(string $name, array|null $data, object|null $subject)  : \\Cake\\Event\\Event"},"eventManager":{"params":{"$eventManager":"Cake\\Event\\EventManager"},"docComment":"\n Returns the Cake\\Event\\EventManager manager instance for this object.\n\n You can use this instance to register any new listeners or callbacks to the\n object events, or create your own events and trigger them at will.\n\n @param \\Cake\\Event\\EventManager|null $eventManager the eventManager to set\n @return \\Cake\\Event\\EventManager\n","inheritdoc":0,"startLine":52,"endLine":52,"origin":"vendor\/cakephp\/cakephp\/src\/Event\/EventDispatcherInterface.php","return":"Cake\\Event\\EventManager","array_return":0,"signature":"(Cake\\Event\\EventManager $eventManager)  : \\Cake\\Event\\EventManager"},"beforeRender":{"params":{"$event":"Cake\\Event\\Event"},"docComment":"\n Before render callback.\n\n @param \\Cake\\Event\\Event $event The beforeRender event.\n @return void\n","inheritdoc":0,"startLine":55,"endLine":62,"origin":"src\/Controller\/Api\/AppController.php","return":"","array_return":0,"signature":"(Cake\\Event\\Event $event)  : void"},"__construct":{"params":{"$request":"Cake\\Network\\Request","$response":"Cake\\Network\\Response","$name":"string|null","$eventManager":"\\Cake\\Event\\EventManager|null","$components":"\\Cake\\Controller\\ComponentRegistry|null"},"docComment":"\n Constructor.\n\n Sets a number of properties based on conventions if they are empty. To override the\n conventions CakePHP uses you can define properties in your class declaration.\n\n @param \\Cake\\Network\\Request|null $request Request object for this controller. Can be null for testing,\n   but expect that features that use the request parameters will not work.\n @param \\Cake\\Network\\Response|null $response Response object for this controller.\n @param string|null $name Override the name useful in testing when using mocks.\n @param \\Cake\\Event\\EventManager|null $eventManager The event manager. Defaults to a new instance.\n @param \\Cake\\Controller\\ComponentRegistry|null $components The component registry. Defaults to a new instance.\n","inheritdoc":0,"startLine":232,"endLine":267,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","signature":"(Cake\\Network\\Request $request, Cake\\Network\\Response $response, string|null $name, \\Cake\\Event\\EventManager|null $eventManager, \\Cake\\Controller\\ComponentRegistry|null $components)  : none"},"components":{"params":{"$components":"\\Cake\\Controller\\ComponentRegistry|null"},"docComment":"\n Get the component registry for this controller.\n\n If called with the first parameter, it will be set as the controller $this->_components property\n\n @param \\Cake\\Controller\\ComponentRegistry|null $components Component registry.\n\n @return \\Cake\\Controller\\ComponentRegistry\n","inheritdoc":0,"startLine":290,"endLine":300,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"Cake\\Controller\\ComponentRegistry","array_return":0,"signature":"(\\Cake\\Controller\\ComponentRegistry|null $components)  : \\Cake\\Controller\\ComponentRegistry"},"loadComponent":{"params":{"$name":"string","$config":"array"},"docComment":"\n Add a component to the controller's registry.\n\n This method will also set the component to a property.\n For example:\n\n ```\n $this->loadComponent('Acl.Acl');\n ```\n\n Will result in a `Toolbar` property being set.\n\n @param string $name The name of the component to load.\n @param array $config The config for the component.\n @return \\Cake\\Controller\\Component\n","inheritdoc":0,"startLine":318,"endLine":323,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"Cake\\Controller\\Component","array_return":0,"signature":"(string $name, array $config)  : \\Cake\\Controller\\Component"},"__get":{"params":{"$name":"string"},"docComment":"\n Magic accessor for model autoloading.\n\n @param string $name Property name\n @return bool|object The model instance or false\n","inheritdoc":0,"startLine":331,"endLine":347,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string $name)  : bool|object"},"__set":{"params":{"$name":"string","$value":"mixed"},"docComment":"\n Magic setter for removed properties.\n\n @param string $name Property name.\n @param mixed $value Value to set.\n @return void\n","inheritdoc":0,"startLine":356,"endLine":381,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string $name, mixed $value)  : void"},"setRequest":{"params":{"$request":"Cake\\Network\\Request"},"docComment":"\n Sets the request objects and configures a number of controller properties\n based on the contents of the request. Controller acts as a proxy for certain View variables\n which must also be updated here. The properties that get set are:\n\n - $this->request - To the $request parameter\n - $this->plugin - To the $request->params['plugin']\n - $this->passedArgs - Same as $request->params['pass]\n - View::$plugin - $this->plugin\n\n @param \\Cake\\Network\\Request $request Request instance.\n @return void\n","inheritdoc":0,"startLine":396,"endLine":404,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(Cake\\Network\\Request $request)  : void"},"invokeAction":{"params":[],"docComment":"\n Dispatches the controller action. Checks that the action\n exists and isn't private.\n\n @return mixed The resulting response.\n @throws \\LogicException When request is not set.\n @throws \\Cake\\Controller\\Exception\\MissingActionException When actions are not defined or inaccessible.\n","inheritdoc":0,"startLine":414,"endLine":430,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"()  : mixed"},"_mergeControllerVars":{"params":[],"docComment":"\n Merge components, helpers vars from\n parent classes.\n\n @return void\n","inheritdoc":0,"startLine":438,"endLine":444,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"()  : void"},"_loadComponents":{"params":[],"docComment":"\n Loads the defined components using the Component factory.\n\n @return void\n","inheritdoc":0,"startLine":467,"endLine":477,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"()  : void"},"startupProcess":{"params":[],"docComment":"\n Perform the startup process for this controller.\n Fire the Components and Controller callbacks in the correct order.\n\n - Initializes components, which fires their `initialize` callback\n - Calls the controller `beforeFilter`.\n - triggers Component `startup` methods.\n\n @return \\Cake\\Network\\Response|null\n","inheritdoc":0,"startLine":489,"endLine":499,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"Cake\\Network\\Response","array_return":0,"signature":"()  : \\Cake\\Network\\Response|null"},"shutdownProcess":{"params":[],"docComment":"\n Perform the various shutdown processes for this controller.\n Fire the Components and Controller callbacks in the correct order.\n\n - triggers the component `shutdown` callback.\n - calls the Controller's `afterFilter` method.\n\n @return \\Cake\\Network\\Response|null\n","inheritdoc":0,"startLine":510,"endLine":516,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"Cake\\Network\\Response","array_return":0,"signature":"()  : \\Cake\\Network\\Response|null"},"redirect":{"params":{"$url":"string|array","$status":"int"},"docComment":"\n Redirects to given $url, after turning off $this->autoRender.\n Script execution is halted after the redirect.\n\n @param string|array $url A string or array-based URL pointing to another location within the app,\n     or an absolute URL\n @param int $status HTTP status code (eg: 301)\n @return \\Cake\\Network\\Response|null\n @link http:book.cakephp.org3.0encontrollers.html#Controller::redirect\n","inheritdoc":0,"startLine":528,"endLine":550,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"Cake\\Network\\Response","array_return":0,"signature":"(string|array $url, int $status)  : \\Cake\\Network\\Response|null"},"setAction":{"params":{"$action":"string"},"docComment":"\n Internally redirects one action to another. Does not perform another HTTP request unlike Controller::redirect()\n\n Examples:\n\n ```\n setAction('another_action');\n setAction('action_with_parameters', $parameter1);\n ```\n\n @param string $action The new action to be 'redirected' to.\n   Any other parameters passed to this method will be passed as parameters to the new action.\n @return mixed Returns the return value of the called action\n","inheritdoc":0,"startLine":566,"endLine":572,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string $action)  : mixed"},"render":{"params":{"$view":"string","$layout":"string"},"docComment":"\n Instantiates the correct view class, hands it its data, and uses it to render the view output.\n\n @param string $view View to use for rendering\n @param string $layout Layout to use\n @return \\Cake\\Network\\Response A response object containing the rendered view.\n @link http:book.cakephp.org3.0encontrollers.html#rendering-a-view\n","inheritdoc":0,"startLine":582,"endLine":613,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"Cake\\Network\\Response","array_return":0,"signature":"(string $view, string $layout)  : \\Cake\\Network\\Response"},"_viewPath":{"params":[],"docComment":"\n Get the viewPath based on controller name and request prefix.\n\n @return string\n","inheritdoc":0,"startLine":620,"endLine":631,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"()  : string"},"referer":{"params":{"$default":"string|null","$local":"bool"},"docComment":"\n Returns the referring URL for this request.\n\n @param string|null $default Default URL to use if HTTP_REFERER cannot be read from headers\n @param bool $local If true, restrict referring URLs to local server\n @return string Referring URL\n","inheritdoc":0,"startLine":640,"endLine":651,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string|null $default, bool $local)  : string"},"paginate":{"params":{"$object":"\\Cake\\ORM\\Table|string|\\Cake\\ORM\\Query|null"},"docComment":"\n Handles pagination of records in Table objects.\n\n Will load the referenced Table object, and have the PaginatorComponent\n paginate the query using the request date and settings defined in `$this->paginate`.\n\n This method will also make the PaginatorHelper available in the view.\n\n @param \\Cake\\ORM\\Table|string|\\Cake\\ORM\\Query|null $object Table to paginate\n (e.g: Table instance, 'TableName' or a Query object)\n @return \\Cake\\ORM\\ResultSet Query results\n @link http:book.cakephp.org3.0encontrollers.html#Controller::paginate\n @throws \\RuntimeException When no compatible table object can be found.\n","inheritdoc":0,"startLine":667,"endLine":689,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"Cake\\ORM\\ResultSet","array_return":0,"signature":"(\\Cake\\ORM\\Table|string|\\Cake\\ORM\\Query|null $object)  : \\Cake\\ORM\\ResultSet"},"isAction":{"params":{"$action":"string"},"docComment":"\n Method to check that an action is accessible from a URL.\n\n Override this method to change which controller methods can be reached.\n The default implementation disallows access to all methods defined on Cake\\Controller\\Controller,\n and allows all public methods on all subclasses of this class.\n\n @param string $action The action to check.\n @return bool Whether or not the method is accessible from a URL.\n","inheritdoc":0,"startLine":701,"endLine":714,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string $action)  : bool"},"beforeFilter":{"params":{"$event":"Cake\\Event\\Event"},"docComment":"\n Called before the controller action. You can use this method to configure and customize components\n or perform logic that needs to happen before each controller action.\n\n @param Event $event An Event instance\n @return void\n @link http:book.cakephp.org3.0encontrollers.html#request-life-cycle-callbacks\n","inheritdoc":0,"startLine":724,"endLine":726,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(Cake\\Event\\Event $event)  : void"},"beforeRedirect":{"params":{"$event":"Cake\\Event\\Event","$url":"string|array","$response":"Cake\\Network\\Response"},"docComment":"\n The beforeRedirect method is invoked when the controller's redirect method is called but before any\n further action.\n\n If the event is stopped the controller will not continue on to redirect the request.\n The $url and $status variables have same meaning as for the controller's method.\n You can set the event result to response instance or modify the redirect location\n using controller's response instance.\n\n @param Event $event An Event instance\n @param string|array $url A string or array-based URL pointing to another location within the app,\n     or an absolute URL\n @param \\Cake\\Network\\Response $response The response object.\n @return void\n @link http:book.cakephp.org3.0encontrollers.html#request-life-cycle-callbacks\n","inheritdoc":0,"startLine":756,"endLine":758,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(Cake\\Event\\Event $event, string|array $url, Cake\\Network\\Response $response)  : void"},"afterFilter":{"params":{"$event":"Cake\\Event\\Event"},"docComment":"\n Called after the controller action is run and rendered.\n\n @param Event $event An Event instance\n @return void\n @link http:book.cakephp.org3.0encontrollers.html#request-life-cycle-callbacks\n","inheritdoc":0,"startLine":767,"endLine":769,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(Cake\\Event\\Event $event)  : void"},"tableLocator":{"params":{"$tableLocator":"Cake\\ORM\\Locator\\LocatorInterface"},"docComment":"\n Sets the table locator.\n If no parameters are passed, it will return the currently used locator.\n\n @param \\Cake\\ORM\\Locator\\LocatorInterface|null $tableLocator LocatorInterface instance.\n @return \\Cake\\ORM\\Locator\\LocatorInterface\n","inheritdoc":0,"startLine":39,"endLine":48,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"Cake\\ORM\\Locator\\LocatorInterface","array_return":0,"signature":"(Cake\\ORM\\Locator\\LocatorInterface $tableLocator)  : \\Cake\\ORM\\Locator\\LocatorInterface"},"log":{"params":{"$msg":"mixed","$level":"int|string","$context":"string|array"},"docComment":"\n Convenience method to write a message to Log. See Log::write()\n for more information on writing to logs.\n\n @param mixed $msg Log message.\n @param int|string $level Error level.\n @param string|array $context Additional log data relevant to this message.\n @return bool Success of log write.\n","inheritdoc":0,"startLine":34,"endLine":37,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(mixed $msg, int|string $level, string|array $context)  : bool"},"_mergeVars":{"params":{"$properties":"array","$options":"array"},"docComment":"\n Merge the list of $properties with all parent classes of the current class.\n\n ### Options:\n\n - `associative` - A list of properties that should be treated as associative arrays.\n   Properties in this list will be passed through Hash::normalize() before merging.\n\n @param array $properties An array of properties and the merge strategy for them.\n @param array $options The options to use when merging properties.\n @return void\n","inheritdoc":0,"startLine":36,"endLine":58,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(array $properties, array $options)  : void"},"_mergeProperty":{"params":{"$property":"string","$parentClasses":"array","$options":"array"},"docComment":"\n Merge a single property with the values declared in all parent classes.\n\n @param string $property The name of the property being merged.\n @param array $parentClasses An array of classes you want to merge with.\n @param array $options Options for merging the property, see _mergeVars()\n @return void\n","inheritdoc":0,"startLine":68,"endLine":93,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string $property, array $parentClasses, array $options)  : void"},"_mergePropertyData":{"params":{"$current":"array","$parent":"array","$isAssoc":"bool"},"docComment":"\n Merge each of the keys in a property together.\n\n @param array $current The current merged value.\n @param array $parent The parent class' value.\n @param bool $isAssoc Whether or not the merging should be done in associative mode.\n @return mixed The updated value.\n","inheritdoc":0,"startLine":103,"endLine":115,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(array $current, array $parent, bool $isAssoc)  : mixed"},"_setModelClass":{"params":{"$name":"string"},"docComment":"\n Set the modelClass and modelKey properties based on conventions.\n\n If the properties are already set they will not be overwritten\n\n @param string $name Class name.\n @return void\n","inheritdoc":0,"startLine":57,"endLine":62,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string $name)  : void"},"loadModel":{"params":{"$modelClass":"string|null","$type":"string"},"docComment":"\n Loads and constructs repository objects required by this object\n\n Typically used to load ORM Table objects as required. Can\n also be used to load other types of repository objects your application uses.\n\n If a repository provider does not return an object a MissingModelException will\n be thrown.\n\n @param string|null $modelClass Name of model class to load. Defaults to $this->modelClass\n @param string $type The type of repository to load. Defaults to 'Table' which\n   delegates to Cake\\ORM\\TableRegistry.\n @return object The model instance created.\n @throws \\Cake\\Datasource\\Exception\\MissingModelException If the model class cannot be found.\n @throws \\InvalidArgumentException When using a type that has not been registered.\n","inheritdoc":0,"startLine":80,"endLine":104,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string|null $modelClass, string $type)  : object"},"modelFactory":{"params":{"$type":"string","$factory":"callable"},"docComment":"\n Register a callable to generate repositories of a given type.\n\n @param string $type The name of the repository type the factory function is for.\n @param callable $factory The factory function used to create instances.\n @return void\n","inheritdoc":0,"startLine":113,"endLine":116,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string $type, callable $factory)  : void"},"requestAction":{"params":{"$url":"string|array","$extra":"array"},"docComment":"\n Calls a controller's method from any location. Can be used to connect controllers together\n or tie plugins into a main application. requestAction can be used to return rendered views\n or fetch the return value from controller actions.\n\n Under the hood this method uses Router::reverse() to convert the $url parameter into a string\n URL. You should use URL formats that are compatible with Router::reverse()\n\n ### Examples\n\n A basic example getting the return value of the controller action:\n\n ```\n $variables = $this->requestAction('articlespopular');\n ```\n\n A basic example of request action to fetch a rendered page without the layout.\n\n ```\n $viewHtml = $this->requestAction('articlespopular', ['return']);\n ```\n\n You can also pass the URL as an array:\n\n ```\n $vars = $this->requestAction(['controller' => 'articles', 'action' => 'popular']);\n ```\n\n ### Passing other request data\n\n You can pass POST, GET, COOKIE and other data into the request using the appropriate keys.\n Cookies can be passed using the `cookies` key. Get parameters can be set with `query` and post\n data can be sent using the `post` key.\n\n ```\n $vars = $this->requestAction('articlespopular', [\n   'query' => ['page' => 1],\n   'cookies' => ['remember_me' => 1],\n ]);\n ```\n\n ### Sending environment or header values\n\n By default actions dispatched with this method will use the global $_SERVER and $_ENV\n values. If you want to override those values for a request action, you can specify the values:\n\n ```\n $vars = $this->requestAction('articlespopular', [\n   'environment' => ['CONTENT_TYPE' => 'applicationjson']\n ]);\n ```\n\n ### Transmitting the session\n\n By default actions dispatched with this method will use the standard session object.\n If you want a particular session instance to be used, you need to specify it.\n\n ```\n $vars = $this->requestAction('articlespopular', [\n   'session' => new Session($someSessionConfig)\n ]);\n ```\n\n @param string|array $url String or array-based url.  Unlike other url arrays in CakePHP, this\n    url will not automatically handle passed arguments in the $url parameter.\n @param array $extra if array includes the key \"return\" it sets the autoRender to true.  Can\n    also be used to submit GETPOST data, and passed arguments.\n @return mixed Boolean true or false on successfailure, or contents\n    of rendered action if 'return' is set in $extra.\n","inheritdoc":0,"startLine":98,"endLine":155,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string|array $url, array $extra)  : mixed"},"viewBuilder":{"params":[],"docComment":"\n Get the view builder being used.\n\n @return \\Cake\\View\\ViewBuilder\n","inheritdoc":0,"startLine":56,"endLine":62,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"Cake\\View\\ViewBuilder","array_return":0,"signature":"()  : \\Cake\\View\\ViewBuilder"},"createView":{"params":{"$viewClass":"string|null"},"docComment":"\n Constructs the view class instance based on the current configuration.\n\n @param string|null $viewClass Optional namespaced class name of the View class to instantiate.\n @return \\Cake\\View\\View\n @throws \\Cake\\View\\Exception\\MissingViewException If view class was not found.\n","inheritdoc":0,"startLine":71,"endLine":120,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"Cake\\View\\View","array_return":0,"signature":"(string|null $viewClass)  : \\Cake\\View\\View"},"set":{"params":{"$name":"string|array","$value":"string|array|null"},"docComment":"\n Saves a variable or an associative array of variables for use inside a template.\n\n @param string|array $name A string or an array of data.\n @param string|array|null $value Value in case $name is a string (which then works as the key).\n   Unused if $name is an associative array, otherwise serves as the values to $name's keys.\n @return $this\n","inheritdoc":0,"startLine":130,"endLine":143,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string|array $name, string|array|null $value)  : $this"},"viewOptions":{"params":{"$options":"string|array|null","$merge":"bool"},"docComment":"\n GetSet valid view options in the object's _validViewOptions property. The property is\n created as an empty array if it is not set. If called without any parameters it will\n return the current list of valid view options. See `createView()`.\n\n @param string|array|null $options string or array of string to be appended to _validViewOptions.\n @param bool $merge Whether to merge with or override existing valid View options.\n   Defaults to `true`.\n @return array The updated view options as an array.\n","inheritdoc":0,"startLine":155,"endLine":170,"origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php","return":"","array_return":0,"signature":"(string|array|null $options, bool $merge)  : array"}}},"namespaces":{"uses":{"MissingActionException":"Cake\\Controller\\Exception","ModelAwareTrait":"ModelAwareTrait","Event":"Cake\\Event","EventDispatcherInterface":"Cake\\Event","EventDispatcherTrait":"EventDispatcherTrait","EventListenerInterface":"Cake\\Event","LogTrait":"LogTrait","Request":"Cake\\Network","Response":"Cake\\Network","LocatorAwareTrait":"LocatorAwareTrait","RequestActionTrait":"RequestActionTrait","Router":"Cake\\Routing","MergeVariablesTrait":"MergeVariablesTrait","ViewVarsTrait":"ViewVarsTrait","LogicException":"LogicException","ReflectionClass":"ReflectionClass","ReflectionException":"ReflectionException","ReflectionMethod":"ReflectionMethod","RuntimeException":"RuntimeException","Controller":"Cake\\Controller","AppController":"App\\Controller\\Api","CodeguyFile":"CodeguyFile","CodeguyMimetype":"CodeguyMimetype","CodeguySize":"CodeguySize","CodeguyFileSystem":"CodeguyFileSystem"},"alias":[],"file":"App\\Controller\\Api"},"properties":{"modifier":{"public":["name","helpers","request","response","paginate","autoRender","components","View","plugin","passedArgs","modelClass","viewClass","viewVars"],"private":[],"protected":["_responseClass","_components","_validViewOptions","_eventManager","_eventClass","_tableLocator","_modelFactories","_viewBuilder"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","name":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n The name of this controller. Controller names are plural, named after the model they manipulate.\n\n Set automatically using conventions in Controller::__construct().\n\n @var string\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"helpers":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n An array containing the names of helpers this controller uses. The array elements should\n not contain the \"Helper\" part of the class name.\n\n Example:\n ```\n public $helpers = ['Form', 'Html', 'Time'];\n ```\n\n @var mixed\n @link http:book.cakephp.org3.0encontrollers.html#configuring-helpers-to-load\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"request":{"type":"Cake\\Network\\Request","array_type":0,"inheritdoc":0,"docComment":"\n An instance of a Cake\\Network\\Request object that contains information about the current request.\n This object contains all the information about a request and several methods for reading\n additional information about the request.\n\n @var \\Cake\\Network\\Request\n @link http:book.cakephp.org3.0encontrollersrequest-response.html#request\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"response":{"type":"Cake\\Network\\Response","array_type":0,"inheritdoc":0,"docComment":"\n An instance of a Response object that contains information about the impending response\n\n @var \\Cake\\Network\\Response\n @link http:book.cakephp.org3.0encontrollersrequest-response.html#response\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"_responseClass":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n The class name to use for creating the response object.\n\n @var string\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"paginate":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n Settings for pagination.\n\n Used to pre-configure pagination preferences for the various\n tables your controller will be paginating.\n\n @var array\n @see \\Cake\\Controller\\Component\\PaginatorComponent\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"autoRender":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n Set to true to automatically render the view\n after action logic.\n\n @var bool\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"_components":{"type":"Cake\\Controller\\ComponentRegistry","array_type":0,"inheritdoc":0,"docComment":"\n Instance of ComponentRegistry used to create Components\n\n @var \\Cake\\Controller\\ComponentRegistry\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"components":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n Array containing the names of components this controller uses. Component names\n should not contain the \"Component\" portion of the class name.\n\n Example:\n ```\n public $components = ['RequestHandler', 'Acl'];\n ```\n\n @var array\n @link http:book.cakephp.org3.0encontrollerscomponents.html\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"View":{"type":"Cake\\View\\View","array_type":0,"inheritdoc":0,"docComment":"\n Instance of the View created during rendering. Won't be set until after\n Controller::render() is called.\n\n @var \\Cake\\View\\View\n @deprecated 3.1.0 Use viewBuilder() instead.\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"_validViewOptions":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n These Controller properties will be passed from the Controller to the View as options.\n\n @var array\n @see \\Cake\\View\\View\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"plugin":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n Automatically set to the name of a plugin.\n\n @var string\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"passedArgs":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n Holds all passed params.\n\n @var mixed\n @deprecated 3.1.0 Use `$this->request->params['pass']` instead.\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"_eventManager":{"type":"Cake\\Event\\EventManager","array_type":0,"inheritdoc":0,"docComment":"\n Instance of the Cake\\Event\\EventManager this object is using\n to dispatch inner events.\n\n @var \\Cake\\Event\\EventManager\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"_eventClass":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n Default class name for new event objects.\n\n @var string\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"_tableLocator":{"type":"Cake\\ORM\\Locator\\LocatorInterface","array_type":0,"inheritdoc":0,"docComment":"\n Table locator instance\n\n @var \\Cake\\ORM\\Locator\\LocatorInterface\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"modelClass":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n This object's primary model class name. Should be a plural form.\n CakePHP will not inflect the name.\n\n Example: For an object named 'Comments', the modelClass would be 'Comments'.\n Plugin classes should use `Plugin.Comments` style names to correctly load\n models from the correct plugin.\n\n @var string\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"_modelFactories":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n A list of model factory functions.\n\n @var array\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"viewClass":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n The name of default View class.\n\n @var string\n @deprecated 3.1.0 Use `$this->viewBuilder()->className()` instead.\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"viewVars":{"type":"","array_type":0,"inheritdoc":0,"docComment":"\n Variables for the view\n\n @var array\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"},"_viewBuilder":{"type":"Cake\\View\\ViewBuilder","array_type":0,"inheritdoc":0,"docComment":"\n The view builder instance being used.\n\n @var \\Cake\\View\\ViewBuilder\n","origin":"vendor\/cakephp\/cakephp\/src\/Controller\/Controller.php"}},"origin":""},"constants":[],"parentclasses":["App\\Controller\\Api\\AppController","Cake\\Controller\\Controller"],"interfaces":["Cake\\Event\\EventListenerInterface","Cake\\Event\\EventDispatcherInterface"],"classname":"EvidencesController","startLine":10,"docComment":"","file":"\/var\/www\/html\/ppni-rev-server\/src\/Controller\/Api\/EvidencesController.php","parentclass":"App\\Controller\\Api\\AppController"}},"extends":{"added":["App\\Controller\\Api\\AppController","Cake\\Controller\\Controller"],"removed":[]},"interfaces":{"added":["Cake\\Event\\EventListenerInterface","Cake\\Event\\EventDispatcherInterface"],"removed":[]}}